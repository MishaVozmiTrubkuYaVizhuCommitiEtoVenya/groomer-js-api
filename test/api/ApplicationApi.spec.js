/**
 * Groomer Service
 * API для будущей GroomCRM или назовите ее уже как-нибудь. На этой странице расписаны основные эндпоинты, по которым можно получить данные из базы данных (или положить их туда, если будет такая возможность). Также здесь можно будет протестировать эти самые эндпоинты, посмотреть ответы и всякое такое.  TODO: 1. Обновить структуру описания в соответствии со структурой БД 2. Подготовить возможность тестирования 3. Добавить тест-кейсы для всего API  ### Changelog  **v1.2.1**: Добавил эндпоинт для получения информации об авторизованном Клиенте/Мастере  **v1.2.0**: Обновлены пути, респонсы, эндпоинты для приложений вынесены в отдельный стек  **v1.1.4**: Обновил структуру WorkingDiapason  **v1.1.3**: Добавил описания возвращаемых кодов.  **v1.1.2**: Удалил упоминания Питомцев и Пушей из АПИ  **v1.1.1**: Добавил параметр \"платформа\" для заказа, заменил OneSignal на FCM + APNs  **v1.1.0**: Убрал пуши из API  **v1.0.4**: добавлены фильтры по датам, добавлено поле телефона для мастеров (для смс-оповещений), добавлено поле push_device_id для отправки пушей на телефон. 
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: kosolapus@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GroomerService);
  }
}(this, function(expect, GroomerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GroomerService.ApplicationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApplicationApi', function() {
    describe('clientClientGet', function() {
      it('should call clientClientGet successfully', function(done) {
        //uncomment below and update the code to test clientClientGet
        //instance.clientClientGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientMasterGet', function() {
      it('should call clientClientMasterGet successfully', function(done) {
        //uncomment below and update the code to test clientClientMasterGet
        //instance.clientClientMasterGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientMasterMasterGet', function() {
      it('should call clientClientMasterMasterGet successfully', function(done) {
        //uncomment below and update the code to test clientClientMasterMasterGet
        //instance.clientClientMasterMasterGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientMasterMasterWorkingDiapasonGet', function() {
      it('should call clientClientMasterMasterWorkingDiapasonGet successfully', function(done) {
        //uncomment below and update the code to test clientClientMasterMasterWorkingDiapasonGet
        //instance.clientClientMasterMasterWorkingDiapasonGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientMasterMasterWorkingDiapasonWorkingDiapasonGet', function() {
      it('should call clientClientMasterMasterWorkingDiapasonWorkingDiapasonGet successfully', function(done) {
        //uncomment below and update the code to test clientClientMasterMasterWorkingDiapasonWorkingDiapasonGet
        //instance.clientClientMasterMasterWorkingDiapasonWorkingDiapasonGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientOrderPost', function() {
      it('should call clientClientOrderPost successfully', function(done) {
        //uncomment below and update the code to test clientClientOrderPost
        //instance.clientClientOrderPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientPromotionGet', function() {
      it('should call clientClientPromotionGet successfully', function(done) {
        //uncomment below and update the code to test clientClientPromotionGet
        //instance.clientClientPromotionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientPromotionPromotionGet', function() {
      it('should call clientClientPromotionPromotionGet successfully', function(done) {
        //uncomment below and update the code to test clientClientPromotionPromotionGet
        //instance.clientClientPromotionPromotionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientServiceGet', function() {
      it('should call clientClientServiceGet successfully', function(done) {
        //uncomment below and update the code to test clientClientServiceGet
        //instance.clientClientServiceGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientServiceServiceGet', function() {
      it('should call clientClientServiceServiceGet successfully', function(done) {
        //uncomment below and update the code to test clientClientServiceServiceGet
        //instance.clientClientServiceServiceGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
